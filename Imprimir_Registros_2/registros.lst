     1                                  extern printf			;funcion extern/ajena al programa.
     2                                  section .data			;Crear variables.
     3                                  	longitud equ 3
     4 00000000 0A00                    	mensaje db 0xA,0
     5                                  	mensaje_len equ $-mensaje
     6                                  
     7                                  section .bss			;Reserva memoria en blanco.
     8 00000000 <res 00000008>          	dividendo resq 1		;vacias. 0x44
     9 00000008 <res 00000008>          	modulo resq 1		;vacias. 0x45
    10 00000010 <res 00000001>          	contador resb 1
    11                                  
    12                                  section .text				;Codigo.
    13                                  global main					;Funcion principal.
    14                                  main:						;Etiqueta de la funcion main.
    15 00000000 55                      	push rbp				;Mueve al principio de la pila a rbp.
    16 00000001 4889E5                  	mov rbp,rsp				;Movemos el contenido de rpb a rsp.
    17 00000004 41B830000000            	mov r8, '0'
    18                                  		
    19 0000000A B900000000              	mov rcx,0				;Inicializar rcx en 0.
    20 0000000F 48890C25[10000000]      	mov [contador],rcx		;Inicializar contador en 0 (ya que rcx pierde el valor despues del Syscall).
    21 00000017 B8E30C0000              	mov rax,3299			;Dato que se quiere imprimir.
    22 0000001C 48890425[00000000]      	mov [dividendo],rax		;Se guarda el numero como parametro de dividendo.
    23                                  inicio_bucle:				;Aqui inicia el bucle.
    24 00000024 41B90A000000            	mov r9, 10				;Se mueve a r9 el valor del divisor.
    25 0000002A BA00000000              	mov rdx,0				;Se inicializa el valor de rdx (donde se colocara el residuo de la divison) en cero, -
    26                                  							;para evitar conflictos.
    27 0000002F 49F7F1                  	div qword r9			;Se realiza la division (rax / r9). div [valor] ~ cociente => rax, residuo => rdx.
    28                                  		
    29 00000032 48890425[00000000]      	mov [dividendo],rax		;El valor de resdiv = rax.
    30 0000003A 4883C230                	add rdx, '0'			;Convierte el simbolo en ASCII
    31 0000003E 48891425[08000000]      	mov [modulo],rdx		;El valor de modulo = rdx
    32                                  	;add qword [modulo], '0'	;Convierte el residuo en su simbolo ASCII, sumandole 48 (48 == '0').
    33                                  	;mov rdx, [modulo]
    34 00000046 4883FA30                	cmp rdx, '0'
    35 0000004A 490F44D0                	cmove rdx, r8
    36 0000004E 52                      	push rdx
    37 0000004F 488B0C25[10000000]      	mov rcx,[contador]		;Se mueve el valor del contador a rcx.
    38 00000057 488B0425[00000000]      	mov rax,[dividendo]		;El valor del dividendo se mueve a rax para realizar la division -
    39                                  							;(ya que aqui se va a almacenar el resultado de la division durante el bucle).
    40 0000005F 48FFC1                  	inc rcx					;Se incrementa el vaor del contador.
    41 00000062 48890C25[10000000]      	mov [contador],rcx		;Se respalda el valor del contador incrementado en la variable "contador".			
    42 0000006A 4883FA30                	cmp rdx, '0' 				;Si la resta de rcx - longitud = 0, activa la bandera de cero (Z) en el registro de Rflags.
    43 0000006E 7402                    	je final_bucle			;if(contador = longitud) { salta a inicio bucle. }
    44                                  							;Si no es asi, sigue adelante.
    45 00000070 EBB2                    	jmp inicio_bucle		;Salta al inicio del bucle a repetir.
    46                                  final_bucle:
    47 00000072 41B900000000            	mov r9, 0
    48 00000078 415A                    	pop r10
    49                                  imprimir_bucle:
    50 0000007A 49FFC1                  	inc r9
    51 0000007D 415A                    	pop r10
    52                                  	; ----------------   Se imprime el residuo.   -----------------------
    53 0000007F B801000000              	mov rax,1
    54 00000084 BF01000000              	mov rdi,1
    55 00000089 4C8916                  	mov [rsi], r10
    56 0000008C BA01000000              	mov rdx,1
    57 00000091 0F05                    	Syscall
    58 00000093 4C3B0C25[10000000]      	cmp r9, [contador]
    59 0000009B 75DD                    	jne imprimir_bucle
    60                                  	;-------------------------------------------------------------------
    61                                  
    62                                  	; ----   Se imprime el salto de linea y terminador de cadena.   ----
    63 0000009D B801000000              	mov rax,1
    64 000000A2 BF01000000              	mov rdi,1
    65 000000A7 48BE-                   	mov rsi,mensaje
    65 000000A9 [0000000000000000] 
    66 000000B1 BA02000000              	mov rdx,mensaje_len
    67 000000B6 0F05                    	Syscall
    68                                  	;-------------------------------------------------------------------
    69 000000B8 4889EC                  	mov rsp,rbp	;Movemos el contenido de rsp a rbp, restaurandolo.
    70 000000BB 5D                      	pop rbp		;Restauramos el registro.
    71 000000BC C3                      ret				;Return main. 
    72                                  
    73                                  ;---------------------- Comandos de compilacion. -----------------------
    74                                  ;nasm -f elf64 -g -F dwarf registros.asm -l registros.lst
    75                                  ;gcc -o registros registros.o -no-pie
    76                                  ;Makefile
    77                                  ;0x404028 -> H
    78                                  ;-----------------------------------------------------------------------
