     1                                  extern printf			;funcion extern/ajena al programa.
     2                                  section .data			;Crear variables.
     3                                  	longitud equ 3
     4 00000000 0A00                    	mensaje db 0xA,0
     5                                  	mensaje_len equ $-mensaje
     6                                  
     7                                  section .bss			;Reserva memoria en blanco.
     8 00000000 <res 00000008>          	dividendo resq 1		;vacias. 0x44
     9 00000008 <res 00000008>          	modulo resq 1		;vacias. 0x45
    10 00000010 <res 00000001>          	contador resb 1
    11                                  
    12                                  section .text				;Codigo.
    13                                  global main					;Funcion principal.
    14                                  main:						;Etiqueta de la funcion main.
    15 00000000 55                      	push rbp				;Mueve al principio de la pila a rbp.
    16 00000001 4889E5                  	mov rbp,rsp				;Movemos el contenido de rpb a rsp.
    17                                  		
    18 00000004 B900000000              	mov rcx,0				;Inicializar rcx en 0.
    19 00000009 48890C25[10000000]      	mov [contador],rcx		;Inicializar contador en 0 (ya que rcx pierde el valor despues del Syscall).
    20 00000011 B8C0000000              	mov rax,192				;Dato que se quiere imprimir.
    21 00000016 48890425[00000000]      	mov [dividendo],rax		;Se guarda el numero como parametro de dividendo.
    22                                  inicio_bucle:				;Aqui inicia el bucle.
    23 0000001E 41B90A000000            	mov r9, 10				;Se mueve a r9 el valor del divisor.
    24 00000024 BA00000000              	mov rdx,0				;Se inicializa el valor de rdx (donde se colocara el residuo de la divison) en cero, -
    25                                  							;para evitar conflictos.
    26 00000029 49F7F1                  	div qword r9			;Se realiza la division (rax / r9). div [valor] ~ cociente => rax, residuo => rdx.
    27                                  		
    28 0000002C 48890425[00000000]      	mov [dividendo],rax		;El valor de resdiv = rax.
    29 00000034 48891425[08000000]      	mov [modulo],rdx		;El valor de modulo = rdx
    30 0000003C 48830425[08000000]-     	add qword [modulo], '0'	;Convierte el residuo en su simbolo ASCII, sumandole 48 (48 == '0').
    30 00000044 30                 
    31                                  	; ----------------   Se imprime el residuo.   -----------------------
    32 00000045 B801000000              	mov rax,1
    33 0000004A BF01000000              	mov rdi,1
    34 0000004F 48BE-                   	mov rsi,modulo
    34 00000051 [0800000000000000] 
    35 00000059 BA01000000              	mov rdx,1
    36 0000005E 0F05                    	Syscall
    37                                  	;-------------------------------------------------------------------
    38 00000060 488B0C25[10000000]      	mov rcx,[contador]		;Se mueve el valor del contador a rcx.
    39 00000068 488B0425[00000000]      	mov rax,[dividendo]		;El valor del dividendo se mueve a rax para realizar la division -
    40                                  							;(ya que aqui se va a almacenar el resultado de la division durante el bucle).
    41 00000070 48FFC1                  	inc rcx					;Se incrementa el vaor del contador.
    42 00000073 48890C25[10000000]      	mov [contador],rcx		;Se respalda el valor del contador incrementado en la variable "contador".			
    43 0000007B 4883F903                	cmp rcx,longitud 		;Si la resta de rcx - longitud = 0, activa la bandera de cero (Z) en el registro de Rflags.
    44 0000007F 7402                    	je final_bucle			;if(contador = longitud) { salta a inicio bucle. }
    45                                  							;Si no es asi, sigue adelante.
    46 00000081 EB9B                    	jmp inicio_bucle		;Salta al inicio del bucle a repetir.
    47                                  final_bucle:
    48                                  	; ----   Se imprime el salto de linea y terminador de cadena.   ----
    49 00000083 B801000000              	mov rax,1
    50 00000088 BF01000000              	mov rdi,1
    51 0000008D 48BE-                   	mov rsi,mensaje
    51 0000008F [0000000000000000] 
    52 00000097 BA02000000              	mov rdx,mensaje_len
    53 0000009C 0F05                    	Syscall
    54                                  	;-------------------------------------------------------------------
    55 0000009E 4889EC                  	mov rsp,rbp	;Movemos el contenido de rsp a rbp, restaurandolo.
    56 000000A1 5D                      	pop rbp		;Restauramos el registro.
    57 000000A2 C3                      ret				;Return main. 
    58                                  
    59                                  ;---------------------- Comandos de compilacion. -----------------------
    60                                  ;nasm -f elf64 -g -F dwarf registros.asm -l registros.lst
    61                                  ;gcc -o registros registros.o -no-pie
    62                                  ;Makefile
    63                                  ;0x404028 -> H
    64                                  ;-----------------------------------------------------------------------
